import json
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import os

API_TOKEN = "7765881253:AAGeSg759wEnbkrqIINg3gK6xfyCeco3SPw"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

ORDERS_FILE = 'orders.json'
if not os.path.exists(ORDERS_FILE):
    with open(ORDERS_FILE, 'w') as f:
        json.dump([], f)

# ‚Äî‚Äî‚Äî –°—Ç–∞–Ω –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî‚Äî‚Äî
class OrderStates(StatesGroup):
    device = State()
    problem = State()
    name = State()
    phone = State()

# ‚Äî‚Äî‚Äî –ú–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Äî‚Äî‚Äî
menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
buttons = [
    KeyboardButton("üì± –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç"),
    KeyboardButton("üß† –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"),
    KeyboardButton("üí∞ –ü—Ä–∞–π—Å"),
    KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"),
    KeyboardButton("üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è"),
    KeyboardButton("‚ÑπÔ∏è FAQ"),
]
menu_kb.add(*buttons)

# ‚Äî‚Äî‚Äî –ö–æ–º–∞–Ω–¥–∏ ‚Äî‚Äî‚Äî
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "–í—ñ—Ç–∞—é! –Ø ‚Äì —Å–µ—Ä–≤–∏—Å‚Äë–±–æ—Ç –¥–ª—è —Ä–µ–º–æ–Ω—Ç—É —Ç–µ—Ö–Ω—ñ–∫–∏.\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –≤ –º–µ–Ω—é –Ω–∏–∂—á–µ ‚§µÔ∏è",
        reply_markup=menu_kb
    )

# ‚Äî‚Äî‚Äî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ ‚Äî‚Äî‚Äî
@dp.message_handler(lambda m: m.text == "üì± –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç")
async def cmd_new_order(message: types.Message):
    await OrderStates.device.set()
    await message.answer("üîß –ù–∞ —è–∫–æ–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ä–µ–º–æ–Ω—Ç? (—Å–º–∞—Ä—Ç—Ñ–æ–Ω/–Ω–æ—É—Ç–±—É–∫/–ü–ö)")

@dp.message_handler(state=OrderStates.device)
async def state_device(message: types.Message, state: FSMContext):
    await state.update_data(device=message.text)
    await OrderStates.next()
    await message.answer("–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É:")

@dp.message_handler(state=OrderStates.problem)
async def state_problem(message: types.Message, state: FSMContext):
    await state.update_data(problem=message.text)
    await OrderStates.next()
    await message.answer("–í–∞—à–µ —ñ–º‚Äô—è:")

@dp.message_handler(state=OrderStates.name)
async def state_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await OrderStates.next()
    await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

@dp.message_handler(state=OrderStates.phone)
async def state_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data['phone'] = message.text

    # –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    with open(ORDERS_FILE, 'r+') as f:
        orders = json.load(f)
        order_id = len(orders) + 1
        orders.append({**data, "id": order_id, "status": "–æ—á—ñ–∫—É—î –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"})
        f.seek(0), f.truncate()
        json.dump(orders, f, ensure_ascii=False, indent=2)

    await message.answer(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –ø—Ä–∏–π–Ω—è—Ç–æ. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
    await state.finish()

# ‚Äî‚Äî‚Äî –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Äî‚Äî‚Äî
@dp.message_handler(lambda m: m.text == "üß† –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
async def cmd_diag(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–¢–∞–∫", "–ù—ñ")
    await message.answer("üì± –í–º–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏—Å—Ç—Ä—ñ–π?", reply_markup=kb)
    await OrderStates.device.set()

@dp.message_handler(state=OrderStates.device)
async def diag_step_device(message: types.Message, state: FSMContext):
    answer = message.text.lower()
    if answer == '–Ω—ñ':
        await message.answer("–ß–∏ –∑–∞—Ä—è–¥–∂–∞—î—Ç—å—Å—è –ø—Ä–∏—Å—Ç—Ä—ñ–π?", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–¢–∞–∫","–ù—ñ"))
        await OrderStates.next()
    else:
        await message.answer("–°–µ–Ω—Å–æ—Ä –ø—Ä–∞—Ü—é—î? (–¢–∞–∫/–ù—ñ)")
        await OrderStates.next()

@dp.message_handler(state=OrderStates.problem)
async def diag_step_problem(message: types.Message, state: FSMContext):
    await message.answer("–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ú–∏ –∑–æ—Ä—ñ—î–Ω—Ç—É—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å —ñ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.", reply_markup=menu_kb)
    await state.finish()

# ‚Äî‚Äî‚Äî –ü—Ä–∞–π—Å ‚Äî‚Äî‚Äî
@dp.message_handler(lambda m: m.text == "üí∞ –ü—Ä–∞–π—Å")
async def cmd_price(message: types.Message):
    await message.answer_document(InputFile("price_list.pdf"), caption="–û–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ –Ω–∞—à–∏–º –ø—Ä–∞–π—Å‚Äë–ª–∏—Å—Ç–æ–º.")

# ‚Äî‚Äî‚Äî –ö–æ–Ω—Ç–∞–∫—Ç–∏ ‚Äî‚Äî‚Äî
@dp.message_handler(lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
async def cmd_contacts(message: types.Message):
    await message.answer(
        "üè† –ê–¥—Ä–µ—Å–∞: –º. –ö–∞–ª–∏–Ω—ñ–≤–∫–∞, –≤—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ 10\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +38 (097) 000‚Äë00‚Äë00\n"
        "üïò –ü–Ω‚Äì–°–± 9:00‚Äì18:00\n"
        "üåê –°–∞–π—Ç: https://your‚Äëservice.com"
    )

# ‚Äî‚Äî‚Äî –°—Ç–∞—Ç—É—Å ‚Äî‚Äî‚Äî
@dp.message_handler(lambda m: m.text == "üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è")
async def cmd_status(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä. 1):")

@dp.message_handler(lambda m: m.text.isdigit())
async def status_lookup(message: types.Message):
    oid = int(message.text)
    with open(ORDERS_FILE) as f:
        orders = json.load(f)
    for o in orders:
        if o["id"] == oid:
            await message.answer(f"üìå –°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{oid}: {o['status']}")
            return
    await message.answer("‚ö†Ô∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# ‚Äî‚Äî‚Äî FAQ ‚Äî‚Äî‚Äî
@dp.message_handler(lambda m: m.text == "‚ÑπÔ∏è FAQ")
async def cmd_faq(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è *–ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:*\n"
        "1. *–ì–∞—Ä–∞–Ω—Ç—ñ–π–Ω—ñ —É–º–æ–≤–∏?* ‚Äì 3 –º—ñ—Å—è—Ü—ñ –Ω–∞ —Ä–æ–±–æ—Ç–∏.\n"
        "2. *–°–∫—ñ–ª—å–∫–∏ —Ç—Ä–∏–≤–∞—î —Ä–µ–º–æ–Ω—Ç?* ‚Äì –¥–æ 5 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤.\n"
        "3. *–Ø–∫ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏?* ‚Äì –ü—Ä–∏–Ω–µ—Å—ñ—Ç—å —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –∞–±–æ –¥–æ–º–æ–≤–∏–º–æ—Å—è –ø—Ä–æ –∫—É—Ä'—î—Ä–∞.\n"
        "4. *–ë—Ä–µ–Ω–¥–∏?* ‚Äì Apple, Samsung, Xiaomi, Asus, HP, Dell —Ç–∞ —ñ–Ω—à—ñ."
    , parse_mode="Markdown")

# ‚Äî‚Äî‚Äî –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ /menu ‚Äî‚Äî‚Äî
@dp.message_handler(lambda m: m.text == "/menu")
async def cmd_menu(message: types.Message):
    await message.answer("–ú–µ–Ω—é:", reply_markup=menu_kb)

# ‚Äî‚Äî‚Äî –õ–æ–≤–∏–º–æ —ñ–Ω—à–µ ‚Äî‚Äî‚Äî
@dp.message_handler()
async def fallback(message: types.Message):
    await message.answer("–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ üòï –°–ø—Ä–æ–±—É–π—Ç–µ /menu –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
